<project name="Service Generator" default="generate" basedir=".">
  <description>
    This is a service generator that can be used to create new UltraDNS services
  </description>
  
  <target name="generate" description="==> Generate a new project">
  
    <input
      message="Please enter project name (lower case, no spaces):"
      addproperty="proj.name"
    />

    <condition property="valid.proj.name">
        <matches pattern="^[a-z_-]+[a-zA-Z_-]*$$" string="${proj.name}"/>
    </condition>
    <fail unless="valid.proj.name">Invalid project name, must start with lower case characters.</fail>
    <echo message="Creating Project: ${proj.name}"/>
    <echo/>
    <input
      message="Please enter project path:"
      addproperty="proj.path"
      defaultvalue="${basedir}/tmp/${proj.name}"
    />
    
    <mkdir dir="${proj.path}"/>
        
    
    <copy todir="${proj.path}" filtering="true">
      <fileset dir="." includes="**/*" excludes="tmp/** README"/>
      <filterset>
        <filter token="proj_name" value="${proj.name}"/>
      </filterset>
    </copy>
    
    <move file="${proj.path}/proj_build.xml" 
      tofile="${proj.path}/build.xml"/>
    
    <move file="${proj.path}/conf/defaults/proj-context.xml" 
        tofile="${proj.path}/conf/defaults/${proj.name}-context.xml"/>

    <move todir="${proj.path}" filtering="true">
      <fileset dir="${proj.path}" includes="**/*"/>
      <mapper type="regexp" from="^(.*)proj(.*)" to="\1${proj.name}\2"/>
    </move>
    

    <concat destfile="${proj.path}/proj_name.info">${proj.name}</concat>
    <loadfile property="proj.name.camel" srcFile="${proj.path}/proj_name.info">
      <filterchain>
      <tokenfilter>
      <scriptfilter language="javascript"><![CDATA[
          var token = self.getToken();
          self.setToken(token.substring(0,1).toUpperCase() + token.substring(1));
      ]]></scriptfilter>
      </tokenfilter>
      </filterchain>
    </loadfile>
    <delete file="${proj.path}/proj_name.info"/>

    
    <mkdir dir="${proj.path}/test/biz/neustar/ultra/${proj.name}"/>
    <mkdir dir="${proj.path}/src/biz/neustar/ultra/${proj.name}"/>
    <touch file="${proj.path}/src/biz/neustar/ultra/${proj.name}/${proj.name.camel}Daemon.java" />
    <concat destfile="${proj.path}/src/biz/neustar/ultra/${proj.name}/${proj.name.camel}Daemon.java">
/*
 * Copyright 2000-2011 NeuStar, Inc. All rights reserved.
 * NeuStar, the Neustar logo and related names and logos are registered
 * trademarks, service marks or tradenames of NeuStar, Inc. All other
 * product names, company names, marks, logos and symbols may be trademarks
 * of their respective owners.
 */

package biz.neustar.ultra.${proj.name};
/** TBD Fill me in **/

public class ${proj.name.camel}Daemon {
  public static void main(String[] args) {
    throw new UnsupportedOperationException();
  }
}
    </concat>
    
    
    <echo/><echo/><echo/>
    <echo>============================================================================</echo>
    <echo>                          Add to SVN                                        </echo>
    <echo>============================================================================</echo>
    <echo>When creating a new project the svn external needs to for the lib directory.</echo>
    <echo>First, add the project to svn:  </echo>
    <echo> svn add ${proj.path}</echo>
    <echo>Then type: </echo>
    <echo> cd lib ; svn propset svn:externals "ivy https://svn.ultradns.net/svn/vendor/ivy/lib/ivy/" .</echo>
    <echo>============================================================================</echo>
  </target>
  
  <target name="clean">
    <delete dir="tmp"/>
  </target>

</project>
