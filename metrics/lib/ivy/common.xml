<project name="common" xmlns:ivy="antlib:org.apache.ivy.ant">
  <property environment="env"/>

  <!-- change the default order, jboss pom's didnt sha1 validate - either ivy bug or sha1 sig -->
  <!-- property name="ivy.checksums" value="md5,sha1" -->
  <!-- disabling all checks since mvn central and jboss repo has tons of invalid checksums, and it's big pain to fix manually -->
  <property name="ivy.checksums" value=""/>
 
  <!-- target: revision  -->
  <target name="revision" description="gets current revision number" unless="isVersion">
    <git-version/>
  </target>
  
  <target name="check-ant-version" description="Ensure that we're running ant 1.7">
    <fail message="Please install ant 1.8.1">
    <condition> <not> <contains string="${ant.version}" substring="1.8"/> </not> </condition>
    </fail>
  </target>
  
  <target name="generate-docs">
    <recreate-dir dir="${basedir}/docs"/>
    <javadoc destdir="${basedir}/docs/java"
           author="true"
           version="true"
           use="true"
           windowtitle="${ant.project.name} API">

      <fileset dir="${src.dir}" defaultexcludes="yes">
        <include name="**"/>
      </fileset>
      <doctitle><![CDATA[<h1>${ant.project.name}</h1>]]></doctitle>
      <bottom><![CDATA[<i>Copyright &#169; 2011-2012 NeuStar, Inc. All Rights Reserved.</i>]]></bottom>
    </javadoc>
  </target>
 
  <macrodef name="recreate-dir">
    <attribute name="dir"/>
    <sequential>
      <delete dir="@{dir}"/>
      <mkdir dir="@{dir}"/>
    </sequential>
  </macrodef>

  <macrodef name="git-version">
    <sequential>
      <condition property="env_ver" value="${env.VERSION}" else="${version}">
        <isset property="env.VERSION"/>
      </condition>
      <echo message="environment version is ${env_ver}"/>
      <property name="major.version" value="${env_ver}"/>

      <exec executable="git" outputproperty="revision">
        <arg line="rev-parse --short HEAD"/>
      </exec>

      <script language="javascript"> <![CDATA[
          importClass(java.lang.Integer);
          rev = project.getProperty("revision");
          revInt = Integer.valueOf(rev, 16);
          echo = project.createTask("echo");
          echo.setMessage("git revision: " + rev + " => " + revInt);
          echo.perform();
          project.setProperty("revision", revInt);
         ]]> </script>

      <echo>Revision found: ${revision}</echo>
      <property name="full.version" value="${major.version}.${revision}"/>
      <echo>Version is: ${full.version}</echo>
    </sequential>
  </macrodef>
  

  <macrodef name="svn-version">
    <sequential>
      <condition property="env_ver" value="${env.VERSION}" else="0.0.0">
        <isset property="env.VERSION"/>
      </condition>
      <echo message="environment version is ${env_ver}"/>
      <property name="major.version" value="${env_ver}"/>
      <exec executable="svn" outputproperty="revision">
	      <arg line="info"/>
	      <redirector>
	          <outputfilterchain>
	            <linecontainsregexp>
	                <regexp pattern='^Revision' />
	            </linecontainsregexp>
	            <tokenfilter>
	                <replaceregex pattern='[\D]+([\d]+)' replace="\1" />
	            </tokenfilter>
	          </outputfilterchain>
	      </redirector>
	    </exec>
      <echo>Revision found: ${revision}</echo>
      <property name="full.version" value="${major.version}.${revision}"/>
      <echo>Version is:  ${full.version}</echo>
    </sequential>
  </macrodef>

  <macrodef name="makerpm" description="creates an rpm for this project">
    <attribute name="specFile" default="${ant.project.name}-redhat.spec"/>
    <attribute name="distDir" default="${dist.dir}"/>
    <attribute name="rpmBaseDir" default="${basedir}/rpm" />
    <attribute name="rpmSourcesDir" default="@{rpmBaseDir}/SOURCES"/>
    <attribute name="distRev" default="" />
    <sequential>
      <fullversion/>
      <delete dir="@{rpmBaseDir}"/>
      <mkdir dir="@{rpmBaseDir}/root"/>
      <mkdir dir="@{rpmBaseDir}/BUILD"/>
      <mkdir dir="@{rpmBaseDir}/SOURCES"/>
      <mkdir dir="@{rpmBaseDir}/RPMS"/>
      <mkdir dir="@{rpmBaseDir}/SRPMS"/>
      <copy todir="@{rpmBaseDir}/SOURCES">
        <fileset dir="@{rpmSourcesDir}"/>
      </copy>
      <property name="rpm.defines"
          value="--define '_topdir @{rpmBaseDir}' --define 'make_ver ${full.version}' --define 'make_build_dir @{distDir}' --define 'dist_dir @{distDir}' --define 'dist @{distRev}'"
      />
      <exec executable="rpmbuild">
        <arg line="-bb deploy/@{specFile} ${rpm.defines}"/>
      </exec>
      <checksum format="MD5SUM" fileext=".md5sum">
        <fileset dir="@{rpmBaseDir}/RPMS">
          <include name="**/*.rpm"/>
        </fileset>
      </checksum>
    </sequential>
  </macrodef>

  <!-- analysis support -->
  <import file="${basedir}/lib/ivy/analysis-common.xml"/>
  <!-- tests support -->
  <import file="${basedir}/lib/ivy/test-common.xml"/>

  <property name="ivy.jar.dir" value="${basedir}/lib/ivy" />

  <path id="ivy.lib.path">
    <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
  </path>

  <property name="user.ivy.defaultCacheDir"
    value="${ivy.default.ivy.user.dir}/cache"/>

  <property name="proj.ivy.defaultCacheDir"
    value="${ivy.project.dir}/ivycache"/>

  <condition property="ivy.defaultCacheDir"
    value="${user.ivy.defaultCacheDir}"
    else="${proj.ivy.defaultCacheDir}">
   <not>
     <equals arg1="${env.USER}" arg2="hudson"></equals>
   </not>
  </condition>
  
  <echo message="default.cache.dir=${ivy.defaultCacheDir}" 
    file="${ivy.jar.dir}/runtime_ivysettings.properties" />
  
  <echo message="ivy default cache dir: ${ivy.defaultCacheDir}"/>

  <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>

  <!-- here is how we would have configured ivy if we had our own ivysettings file -->
  <ivy:settings file="${ivy.jar.dir}/ivysettings.xml" />
	
  <!-- target: resolve -->
  <target name="clean-resolve" depends="clean-lib,resolve"/>

  <target name="resolve" depends="" description="--> resolve and retrieve dependencies with ivy">
    <mkdir dir="${lib.dir}"/> <!-- not usually necessary, ivy creates the directory IF there are dependencies -->
    	
    <!-- the call to resolve is not mandatory, retrieve makes an implicit call if we don't -->
    <ivy:resolve/>
    <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact].[ext]" />
  </target>
    
  <!-- target: report  -->
  <target name="report" depends="resolve" description="--> generates a report of dependencies">
      <ivy:report todir="${build.dir}"/>
  </target>
    
	<target name="ivy-new-version" depends="" unless="ivy.new.revision">
    	<!-- default module version prefix value -->
		<property name="module.version.prefix" value="${module.version.target}-dev-b" />
		
    	<!-- asks to ivy an available version number -->
		<ivy:info/>
    <ivy:buildnumber 
        resolver="ivysvn"
    		organisation="${ivy.organisation}" module="${ivy.module}" 
    		revision="${module.version.prefix}" defaultBuildNumber="1" revSep=""/>
	</target>

  <target name="local-version">
		<tstamp><format property="now" pattern="yyyyMMddHHmmss"/></tstamp>
    <property name="ivy.new.revision" value="${module.version.target}-local-${now}"/>
  </target>
    
  <property name="classes.dir" value="build"/>
  
  <target name="version" depends="ivy-new-version">
    <!-- create version file in classpath for later inclusion in jar -->
    <mkdir dir="${classes.dir}"/>
		<echo message="version=${ivy.new.revision}" file="${classes.dir}/${ant.project.name}.properties" append="false" />

		<!-- load generated version properties file -->
    <property file="${classes.dir}/${ant.project.name}.properties" />
  </target>

  <!-- target: publish -->
  <target name="publish" depends="revision" description="--> publish this project in the ivy svn repository">
     <tstamp>
       <format property="now" pattern="yyyyMMddHHmmss"/>
     </tstamp>
     <property name="ivy.organisation" value="biz.neustar.ultra"/>
     <ivy:info/>
     <property name="ivy.new.revision" value="${major.version}"/>

     <property name="ivy.new.build.number" value="${revision}"/>
     <echo message="version=${ivy.new.revision}" file="${classes.dir}/${ant.project.name}.properties" append="false" />
     <ivy:configure settingsId="releases.settings" realm="Sonatype Nexus Repository Manager" override="true"
         host="stulhdebuild3.ultra.neustar.com" username="deployment" passwd="d3pl0y" />

     <ivy:publish artifactspattern="${dist.dir}/[artifact].[ext]" 
   			        resolver="releases"
   			        pubrevision="${ivy.new.revision}.${revision}"
				        pubdate="${now}"
   			        status="integration"
   				      forcedeliver="true"
                publishivy="true"
                settingsRef="releases.settings" />
      <echo message="project ${ant.project.name} published with version ${ivy.new.revision}.${revision}" />
   </target>

  <target name="svn_publish" depends="revision" description="--> publish this project in the ivy svn repository">
      <tstamp>
        <format property="now" pattern="yyyyMMddHHmmss"/>
      </tstamp>
      <property name="ivy.organisation" value="biz.neustar.ultra"/>
      <ivy:info/>

      <property name="ivy.new.revision" value="${major.version}"/>

      <property name="ivy.new.build.number" value="${revision}"/>
      <echo message="version=${ivy.new.revision}" file="${classes.dir}/${ant.project.name}.properties" append="false" />
      <ivy:publish artifactspattern="${dist.dir}/[artifact].[ext]" 
    			        resolver="ivysvn"
    			        pubrevision="${ivy.new.revision}.${revision}"
				pubdate="${now}"
    			        status="integration"
    				forcedeliver="true"
    	/>
       <echo message="project ${ant.project.name} published with version ${ivy.new.revision}.${revision}" />
  </target>



    <!-- ================================= 
          target: publish-local              
         ================================= -->
    <target name="publish-local" depends="local-version" description="--> publish this project in the local ivy repository">
    	<ivy:publish artifactspattern="${build.dir}/[artifact].[ext]" 
    			        resolver="local"
    			        pubrevision="${version}"
				        pubdate="${now}"
    			        status="integration"
    					forcedeliver="true"
    	/>
        <echo message="project ${ant.project.name} published locally with version ${version}" />
    </target>

	<!-- ================================= 
          target: clean-local              
         ================================= -->
	<target name="clean-local" depends="" 
		description="--> cleans the local repository for the current module">
		<ivy:info file="${ivy.file}" />
	   <delete dir="${ivy.local.default.root}/${ivy.organisation}/${ivy.module}"/>
	</target>

	<!-- ================================= 
          target: clean-lib              
         ================================= -->
    <target name="clean-lib" description="--> clean the project libraries directory (dependencies)">
        <delete includeemptydirs="true">
          <fileset dir="${lib.dir}" excludes="**/ivy/**,.jruby/**"/>
        </delete>
    </target>

    <!-- ================================= 
          target: clean-build              
         ================================= -->
    <target name="clean-build" description="--> clean the project built files">
        <delete includeemptydirs="true" dir="${build.dir}"/>
        <delete includeemptydirs="true" dir="${test.build.dir}"/>
        <delete includeemptydirs="true" dir="${coverage.build.dir}"/>
    </target>

    <!-- target: clean -->
  <target name="clean" depends="clean-build, clean-lib" description="--> clean the project" />

</project>


